module 0xcafe.BasicTwo {

    public entry calibrate_1() {
    label b0:
        return;
    }


    public entry calibrate_2_a() {
        label b0:
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();

        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();

        return;
    }

    public entry calibrate_2() {
    label b0:
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();

        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = (); 

        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();

        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();  

        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();

        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = (); 

        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();

        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();                        
        return;
    }

    public entry calibrate_3() {
    label b0:
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);   
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);   
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);
        (1,2,3,4,5,6,7,8,9,10);                        
        _ = (1-2);
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = (); 
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = (); 
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = (); 
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();
        _,_,_,_,_,_,_,_,_,_ = ();                        
        return;
    }

    public entry calibrate_4() {
    label b0:
        _ = (1000-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1);
        return;              
    }

    public entry calibrate_5() {
    label b0:
        (1,2);
        _,_= ();
        _ = (2-1);
        _ = (2-1);                                                                                                                 
        return;
    }

    f1(n: u64) {
    label b0:
        jump_if_false (0 < copy(n)) end;
        Self.f1(move(n) - 1);
    label end:
        return;
    }

    public entry calibrate_6() {
    label b0:
        Self.f1(100);
        return;
    }

    f2(n: u64, a: u64) {
    label b0:
        jump_if_false (0 < copy(n)) end;
        Self.f2(move(n) - 1, move(a));
    label end:
        return;
    }

    public entry calibrate_7() {
    label b0:
        Self.f2(1000, 50);
        return;
    }

    f3(n: u64) {
        let l1: u64;
        let l2: u64;
        let l3: u64;
    label b0:
        jump_if_false (0 < copy(n)) end;
        Self.f3(move(n) - 1);
    label end:
        return;
    }

    public entry calibrate_9() {
    label b0:
        Self.f3(200);
        return;
    }

    f4() {
    label b0:
        return;
    }

    public entry calibrate_10() {
    let i: u64;
    label entry:
        i = 0;
    label loop_start:
        jump_if_false (copy(i) < 1000) loop_end;
        i = move(i) + 1;

        Self.f4();

        jump loop_start;
    label loop_end:
        return;  
    }

    f5(n: u64) {
    label b0:
        jump_if_false (0 < copy(n)) end;
        Self.f5(move(n) - 1);
        jump true_end;
    label end:
        _ = (1 - 2);
    label true_end:
        return;
    }

    public entry calibrate_11() {
    label b0:
        Self.f5(100);
        return;
    }
}